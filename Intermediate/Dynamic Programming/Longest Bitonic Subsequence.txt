
/*1. You are given a number n, representing the number of elements.
2. You are given n numbers, representing the contents of array of length n.
3. You are required to print the length of longest bitonic subsequence of array.
Note -> bitonic subsequence begins with elements in increasing order, followed by elements in decreasing order.*/



























import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        // write your code here
        
        
        
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        
        int[] arr = new int[n];
        
        for (int i = 0; i<arr.length; i++){
            arr[i] = scn.nextInt();
        }
        
        int[] lis = new int[n];
        
        for (int i = 0; i<arr.length; i++){
            int max = 0;
            
            for (int j = 0; j<i; j++){
                if (arr[i] >= arr[j]){
                    if (lis[j] > max){
                        max = lis[j];
                    }
                }
            }
            
            lis[i] = max + 1;
            
        }
        
        
        int[] lds = new int[n];
        
        for (int i = arr.length-1; i>=0; i--){
            int max = 0;
            
            for (int j = arr.length-1; j>i; j--){
                if (arr[i] >= arr[j]){
                    if (lds[j] > max){
                        max = lds[j];
                    }
                }
            }
            
            lds[i] = max+1;
        }
        
        
        
        int omax = 0;
        for (int i = 0; i<arr.length; i++){
            if (lis[i] + lds[i] - 1 > omax){
                omax = lis[i] + lds[i] - 1;
            }
        }
        
        System.out.println(omax);
        
        
        
        
        
        
    }

}