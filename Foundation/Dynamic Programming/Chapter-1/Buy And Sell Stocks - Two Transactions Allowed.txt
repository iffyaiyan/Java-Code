/*1. You are given a number n, representing the number of days.
2. You are given n numbers, where ith number represents price of stock on ith day.
3. You are required to print the maximum profit you can make if you are allowed two transactions at-most.
Note - There can be no overlapping transaction. One transaction needs to be closed (a buy followed by a sell) before opening another transaction (another buy).*/
























import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        // write your code here
        
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        
        int[] arr = new int[n];
        
        for (int i = 0; i<arr.length; i++){
            arr[i] = scn.nextInt();
        }
        
        int mpist = 0;
        int leastsf = arr[0];
        int[] dpl = new int[arr.length];
        
        for (int i = 1; i<arr.length; i++){
            if (arr[i] < leastsf){
                leastsf = arr[i];
            }
            
            mpist = arr[i] - leastsf;
            if (mpist > dpl[i-1]){
                dpl[i] = mpist;
            } else {
                dpl[i] = dpl[i-1];
            }
        }
        
        
        int mpibt = 0;
        int maxat = arr[arr.length-1];
        int[] dpr = new int[arr.length];
        
        for (int i = arr.length-2; i>=0; i--){
            if (arr[i] > maxat){
                maxat = arr[i];
            }
            
            mpibt = maxat - arr[i];
            if (mpibt > dpr[i+1]){
                dpr[i] = mpibt;
            } else {
                dpr[i] = dpr[i+1];
            }
        }
        
        int op = 0;
        for (int i = 0; i<arr.length; i++){
            if (dpr[i] + dpl[i] > op){
                op = dpr[i] + dpl[i];
            }
            
        }
        
        System.out.println(op);
        
        
    }

}