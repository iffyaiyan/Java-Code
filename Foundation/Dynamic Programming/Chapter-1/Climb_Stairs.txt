
/*1. You are given a number n, representing the number of stairs in a staircase.
2. You are on the 0th step and are required to climb to the top.
3. In one move, you are allowed to climb 1, 2 or 3 stairs.
4. You are required to print the number of different paths via which you can climb to the top.
*/




import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        // write your code here
        
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        int cp = tabulrform(n); // countPaths(n, new int[n+1])
        System.out.println(cp);
        
    }
    
    
    // memoization path
    
    public static int countPaths(int n, int[] qp){
        
        if (n==0){
            return 1;
        }else if (n<0){
            return 0;
        }
        
        if (qp[n]>0){
            return qp[n];
        }
        
        int nm1 = countPaths(n-1, qp);
        int nm2 = countPaths(n-2, qp);
        int nm3 = countPaths(n-3, qp);
        
        int cp = nm1+nm2+nm3;
        
        qp[n] = cp;
        return cp;
        
    }
    
    
    // tabulation method
    
    public static int tabulrform(int n){
        int[] dp = new int[n+1];
        
        dp[0] = 1;
        
        for (int i = 1; i<=n; i++){
            if (i==1){
                dp[i] = dp[i-1];
            }else if(i==2){
                dp[i] = dp[i-1] + dp[i-2];
            }else{
                dp[i] = dp[i-1]+dp[i-2]+dp[i-3];
            }
        }
        
        return dp[n];
    }	


   // Tabulation method following Rajnish Sir Trick and in the main we need to pass the dp array
    // public static int CountPath_T(int n, int[] dp){
        
    //     dp[0] = 1;
        
    //     int N = n;
        
    //     for (n = 1; n <= N; n++){
            
    //         if (n == 1){
    //           dp[n] = dp[n-1];
    //         } else if (n == 2){
    //             dp[n] = dp[n-1] + dp[n-2];
    //         } else {
    //             dp[n] = dp[n-1] + dp[n-2] + dp[n-3];
    //         }
            
    //     }
    //     return dp[N];
        
    // }
	





}