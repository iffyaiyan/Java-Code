import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        int fibn = FibMemoized(n, new int[n+1]);
        System.out.println(fibn);
    }
    
    public static int FibMemoized(int n, int[] qb){
        if (n==0||n==1){
            return n;
        }
        
        if (qb[n] != 0){
            return qb[n];
        }
        
        int fibmn1 = FibMemoized(n-1, qb);
        int fibmn2 = FibMemoized(n-2, qb);
        int fibn = fibmn1+fibmn2;
        
        qb[n] = fibn;
        
        return qb[n];
    }

}





*************************************************************************************************************************************************************************
## New soln

import java.io.*;
import java.util.*;

public class Main{

public static void main(String[] args) throws Exception {
    // write your code here
    
    Scanner scn = new Scanner(System.in);
    int n = scn.nextInt();
    int ans = fibTab(n, new int[n+1]);
    
    System.out.println(ans);
    
    
 }
 
// public static int fib(int n){
    
    
//     if (n==0||n==1){
//             return n;
//         }
    
//     int fib1 = fib(n-1);
//     int fib2 = fib(n-2);
    
//     int fib = fib1+fib2;
    
//     return fib;
    
// }



// public static int fibM(int n, int[] qb){
    
    
//     if (n==0||n==1){
//             return n;
//     }
    
//     if (qb[n] != 0){
//         return qb[n];
//     }
    
    
    
//     int fib1 = fibM(n-1, qb);
//     int fib2 = fibM(n-2, qb);
    
//     int fibn = fib1+fib2;
    
//     qb[n] = fibn;
    
//     return qb[n];
    
// }


public static int fibTab(int n, int[] qb){
    
    int N = n;
    
    for (n=0; n<=N; n++){
        
        
        if (n==0||n==1){
            qb[n] = n;
            continue;
        }
        
        int fib1 = qb[n-1];
        int fib2 = qb[n-2];
        
        int fibn = fib1+fib2;
        
        qb[n] = fibn;
        
    }
    
    return qb[N];
    
}


}